definitions:
  dtos.CommentCreate:
    properties:
      message:
        maxLength: 300
        minLength: 5
        type: string
    required:
    - message
    type: object
  dtos.CommentResponse:
    properties:
      dislikes:
        items:
          $ref: '#/definitions/dtos.UserResponse'
        type: array
      id:
        type: integer
      likes:
        items:
          $ref: '#/definitions/dtos.UserResponse'
        type: array
      message:
        type: string
      tweet:
        $ref: '#/definitions/dtos.TweetResponse'
      tweet_id:
        type: integer
      user:
        $ref: '#/definitions/dtos.UserResponse'
      user_id:
        type: integer
    type: object
  dtos.CommentUpdate:
    properties:
      message:
        maxLength: 300
        minLength: 5
        type: string
    type: object
  dtos.FileResponse:
    properties:
      comment_id:
        type: integer
      description:
        type: string
      directory:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      name:
        type: string
      tweet_id:
        type: integer
    type: object
  dtos.TweetCreate:
    properties:
      message:
        maxLength: 1000
        minLength: 10
        type: string
      title:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - message
    - title
    type: object
  dtos.TweetResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/dtos.CommentResponse'
        type: array
      dislikes:
        items:
          $ref: '#/definitions/dtos.UserResponse'
        type: array
      files:
        items:
          $ref: '#/definitions/dtos.FileResponse'
        type: array
      id:
        type: integer
      likes:
        items:
          $ref: '#/definitions/dtos.UserResponse'
        type: array
      message:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/dtos.UserResponse'
      user_id:
        type: integer
    type: object
  dtos.TweetUpdate:
    properties:
      message:
        maxLength: 1000
        minLength: 10
        type: string
      title:
        maxLength: 50
        minLength: 2
        type: string
    type: object
  dtos.UserCreate:
    properties:
      mobile_number:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - mobile_number
    - password
    - username
    type: object
  dtos.UserResponse:
    properties:
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      mobile_number:
        type: string
      username:
        type: string
    type: object
  dtos.UserUpdate:
    properties:
      enabled:
        type: boolean
      firstname:
        maxLength: 25
        minLength: 2
        type: string
      lastname:
        maxLength: 35
        minLength: 3
        type: string
      mobile_number:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.OtpDto:
    properties:
      mobile_number:
        type: string
    required:
    - mobile_number
    type: object
  models.Comment:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      dislikes:
        items:
          $ref: '#/definitions/models.User'
        type: array
      enabled:
        type: boolean
      files:
        items:
          $ref: '#/definitions/models.File'
        type: array
      id:
        type: integer
      likes:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      tweet:
        $ref: '#/definitions/models.Tweet'
      tweet_id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.File:
    properties:
      comment:
        $ref: '#/definitions/models.Comment'
      comment_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      description:
        type: string
      directory:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      tweet:
        $ref: '#/definitions/models.Tweet'
      tweet_id:
        type: integer
    type: object
  models.Tweet:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      dislikes:
        items:
          $ref: '#/definitions/models.User'
        type: array
      enabled:
        type: boolean
      files:
        items:
          $ref: '#/definitions/models.File'
        type: array
      id:
        type: integer
      likes:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      comment_dislikes:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      comment_likes:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      enabled:
        type: boolean
      firstname:
        type: string
      followers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      followings:
        items:
          $ref: '#/definitions/models.User'
        type: array
      id:
        type: integer
      lastname:
        type: string
      mobile_number:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      password:
        type: string
      tweet_dislikes:
        items:
          $ref: '#/definitions/models.Tweet'
        type: array
      tweet_likes:
        items:
          $ref: '#/definitions/models.Tweet'
        type: array
      tweets:
        items:
          $ref: '#/definitions/models.Tweet'
        type: array
      username:
        type: string
    type: object
  responses.Response:
    properties:
      error:
        type: string
      message:
        type: string
      result: {}
      status:
        type: boolean
      statusCode:
        type: integer
      validationError:
        items:
          $ref: '#/definitions/validations.ValidationError'
        type: array
    type: object
  validations.ValidationError:
    properties:
      field:
        type: string
      param:
        type: string
      tag:
        type: string
    type: object
info:
  contact: {}
paths:
  /comment/delete:
    delete:
      description: delete comment
      parameters:
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      - description: user's password
        in: query
        name: password
        required: true
        type: string
      - description: comment's id
        in: query
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete Comment
      tags:
      - Comment
  /comment/dislike:
    post:
      description: dislike comment
      parameters:
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      - description: user's password
        in: query
        name: password
        required: true
        type: string
      - description: comment's id
        in: query
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Dislike Comment
      tags:
      - Comment
  /comment/get/comment:
    get:
      description: get comment
      parameters:
      - description: comment's id
        in: query
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/models.Comment'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Comment
      tags:
      - Comment
  /comment/get/comments:
    get:
      description: get comments of an user
      parameters:
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.CommentResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Comments
      tags:
      - Comment
  /comment/like:
    post:
      description: like comment
      parameters:
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      - description: user's password
        in: query
        name: password
        required: true
        type: string
      - description: comment's id
        in: query
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Like Comment
      tags:
      - Comment
  /comment/post:
    post:
      consumes:
      - application/json
      description: post comment with message
      parameters:
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      - description: user's password
        in: query
        name: password
        required: true
        type: string
      - description: tweet's id
        in: query
        name: tweet_id
        required: true
        type: string
      - description: get message of new comment
        in: body
        name: CommentCreate
        required: true
        schema:
          $ref: '#/definitions/dtos.CommentCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.CommentResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Post Comment
      tags:
      - Comment
  /comment/update:
    put:
      consumes:
      - application/json
      description: update comment's message
      parameters:
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      - description: user's password
        in: query
        name: password
        required: true
        type: string
      - description: comment's id
        in: query
        name: comment_id
        required: true
        type: string
      - description: get updated message of comment
        in: body
        name: CommentUpdate
        required: true
        schema:
          $ref: '#/definitions/dtos.CommentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.CommentResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Update Comment
      tags:
      - Comment
  /file/post/tweet:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: create new file for tweet
      parameters:
      - in: formData
        name: description
        type: string
      - description: new file
        in: formData
        name: file
        required: true
        type: file
      - description: user's username
        in: query
        name: username
        required: true
        type: string
      - description: user's password
        in: query
        name: password
        required: true
        type: string
      - description: tweet id
        in: query
        name: tweet_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.FileResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "424":
          description: Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Create File For Tweet
      tags:
      - File
  /tweet/delete:
    delete:
      description: delete tweet by id and its owner information
      parameters:
      - description: owner's username
        in: query
        name: username
        required: true
        type: string
      - description: owner's password
        in: query
        name: password
        required: true
        type: string
      - description: tweet's id
        in: query
        name: tweet_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete Tweet
      tags:
      - Tweet
  /tweet/dislike:
    post:
      description: dislike tweet
      parameters:
      - description: owner's username
        in: query
        name: username
        required: true
        type: string
      - description: owner's password
        in: query
        name: password
        required: true
        type: string
      - description: tweet's id
        in: query
        name: tweet_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Dislike Tweet
      tags:
      - Tweet
  /tweet/explore:
    get:
      description: delete tweet by id and its owner information
      parameters:
      - description: owner's username
        in: query
        name: username
        required: true
        type: string
      - description: owner's password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.TweetResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Followings Tweets
      tags:
      - Tweet
  /tweet/get/followings/tweets:
    get:
      description: delete tweet by id and its owner information
      parameters:
      - description: owner's username
        in: query
        name: username
        required: true
        type: string
      - description: owner's password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.TweetResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Followings Tweets
      tags:
      - Tweet
  /tweet/get/tweet:
    get:
      description: get tweet by id
      parameters:
      - description: tweet's id
        in: query
        name: tweet_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/models.Tweet'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Tweet
      tags:
      - Tweet
  /tweet/get/tweets:
    get:
      description: get tweets those tweeted by an user
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.TweetResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Tweets
      tags:
      - Tweet
  /tweet/like:
    post:
      description: like tweet
      parameters:
      - description: owner's username
        in: query
        name: username
        required: true
        type: string
      - description: owner's password
        in: query
        name: password
        required: true
        type: string
      - description: tweet's id
        in: query
        name: tweet_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Like Tweet
      tags:
      - Tweet
  /tweet/post:
    post:
      consumes:
      - application/json
      description: tweet post
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      - description: get user's password
        in: query
        name: password
        required: true
        type: string
      - description: get title and message of new tweet
        in: body
        name: TweetCreate
        required: true
        schema:
          $ref: '#/definitions/dtos.TweetCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.TweetResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Post Tweet
      tags:
      - Tweet
  /tweet/update:
    put:
      consumes:
      - application/json
      description: update tweet's title and message
      parameters:
      - description: owner's username
        in: query
        name: username
        required: true
        type: string
      - description: owner's password
        in: query
        name: password
        required: true
        type: string
      - description: tweet's id
        in: query
        name: tweet_id
        required: true
        type: string
      - description: update's fields
        in: body
        name: TweetUpdate
        required: true
        schema:
          $ref: '#/definitions/dtos.TweetUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.TweetResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Update Tweet
      tags:
      - Tweet
  /user/delete:
    delete:
      description: delete user with user's username and password
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      - description: get user's password
        in: query
        name: password
        required: true
        type: string
      - description: get deleted_by user id
        in: query
        name: deleted_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete User
      tags:
      - User
  /user/follow:
    post:
      description: following an user by another with it's username and password and
        also the target user's id
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      - description: get user's password
        in: query
        name: password
        required: true
        type: string
      - description: get target's username
        in: query
        name: target_username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Follow An User
      tags:
      - User
  /user/get/followers:
    get:
      description: get followers of an user
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.UserResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Followers
      tags:
      - User
  /user/get/followings:
    get:
      description: get followings of an user
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.UserResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Followings
      tags:
      - User
  /user/get/otp:
    post:
      consumes:
      - application/json
      description: get otp by valid mobile_number
      parameters:
      - description: body for get mobile_number
        in: body
        name: OtpDto
        required: true
        schema:
          $ref: '#/definitions/handlers.OtpDto'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "503":
          description: Redis Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Otp
      tags:
      - User
  /user/get/profile:
    get:
      description: get user profile
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/models.User'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Profile
      tags:
      - User
  /user/get/users:
    get:
      description: get users just with admin username and password
      parameters:
      - description: get admin username
        in: header
        name: admin_username
        required: true
        type: string
      - description: get admin password
        in: header
        name: admin_password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dtos.UserResponse'
                  type: array
              type: object
        "406":
          description: Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Users
      tags:
      - User
  /user/new:
    post:
      consumes:
      - application/json
      description: make new user with username and password and mobile_number and
        also the otp has gotten by mobile_number
      parameters:
      - description: body for create user
        in: body
        name: UserCreate
        required: true
        schema:
          $ref: '#/definitions/dtos.UserCreate'
      - description: the otp has been gotten for the mobile_number
        in: query
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.UserResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "406":
          description: Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Make New User
      tags:
      - User
  /user/unfollow:
    delete:
      description: unfollowing an user by another with it's username and password
        and also the target user's id
      parameters:
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      - description: get user's password
        in: query
        name: password
        required: true
        type: string
      - description: get target's username
        in: query
        name: target_username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: UnFollow An User
      tags:
      - User
  /user/update:
    put:
      consumes:
      - application/json
      description: update user's firstname, lastname and ...
      parameters:
      - description: body for update user
        in: body
        name: UserUpdate
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdate'
      - description: get user's username
        in: query
        name: username
        required: true
        type: string
      - description: get user's password
        in: query
        name: password
        required: true
        type: string
      - description: get modified_by user id
        in: query
        name: modified_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                result:
                  $ref: '#/definitions/dtos.UserResponse'
              type: object
        "400":
          description: Validation Error
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Update User
      tags:
      - User
swagger: "2.0"
